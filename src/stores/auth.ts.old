'use client';

import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { User } from '@/types';
import { authApi } from '@/lib/api';

interface AuthState {
  user: User | null;
  token: string | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  hasHydrated: boolean;
  
  // Actions
  login: (email: string, password: string) => Promise<void>;
  register: (data: { name: string; email: string; password: string; password_confirmation: string }) => Promise<void>;
  logout: () => void;
  updateProfile: (data: Partial<User>) => Promise<void>;
  setUser: (user: User) => void;
  setToken: (token: string) => void;
  setHasHydrated: (state: boolean) => void;
  clearAuth: () => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      token: null,
      isLoading: false,
      isAuthenticated: false,
      hasHydrated: false,

      login: async (email: string, password: string) => {
        try {
          set({ isLoading: true });
          const response = await authApi.login({ email, password });
          const { user, token } = response.data;
          
          set({
            user,
            token,
            isAuthenticated: true,
            isLoading: false,
          });

          // Store token in localStorage for API client
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', token);
          }
        } catch (error) {
          set({ isLoading: false });
          throw error;
        }
      },

      register: async (data) => {
        try {
          set({ isLoading: true });
          const response = await authApi.register(data);
          const { user, token } = response.data;
          
          set({
            user,
            token,
            isAuthenticated: true,
            isLoading: false,
          });

          // Store token in localStorage for API client
          if (typeof window !== 'undefined') {
            localStorage.setItem('auth_token', token);
          }
        } catch (error) {
          set({ isLoading: false });
          throw error;
        }
      },

      logout: () => {
        // Clear state immediately
        set({
          user: null,
          token: null,
          isAuthenticated: false,
        });

        // Clear all auth-related storage
        if (typeof window !== 'undefined') {
          localStorage.removeItem('auth_token');
          localStorage.removeItem('auth-store');
          // Force clear the zustand persist storage
          try {
            const storage = window.localStorage;
            const keys = Object.keys(storage);
            keys.forEach(key => {
              if (key.startsWith('auth')) {
                storage.removeItem(key);
              }
            });
          } catch (e) {
            console.error('Error clearing auth storage:', e);
          }
        }

        // Call logout API (non-blocking)
        try {
          authApi.logout().catch(() => {
            // Ignore errors on logout API call
          });
        } catch (error) {
          // Ignore errors
        }
      },

      updateProfile: async (data) => {
        try {
          set({ isLoading: true });
          const response = await authApi.updateProfile(data);
          const updatedUser = response.data;
          
          set({
            user: updatedUser,
            isLoading: false,
          });
        } catch (error) {
          set({ isLoading: false });
          throw error;
        }
      },

      setUser: (user) => set({ user, isAuthenticated: !!user }),
      setToken: (token) => set({ token }),
      setHasHydrated: (state) => set({ hasHydrated: state }),
      
      clearAuth: () => {
        set({
          user: null,
          token: null,
          isAuthenticated: false,
        });
        if (typeof window !== 'undefined') {
          localStorage.removeItem('auth_token');
          localStorage.removeItem('auth-store');
        }
      },
    }),
    {
      name: 'auth-store',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({
        user: state.user,
        token: state.token,
        isAuthenticated: state.isAuthenticated,
      }),
      onRehydrateStorage: (state) => {
        return (state, error) => {
          if (error) {
            console.error('An error occurred during hydration', error);
            // Clear invalid state
            if (state) {
              state.clearAuth();
            }
          } else if (state) {
            // Validate stored auth state
            if (typeof window !== 'undefined') {
              const storedToken = localStorage.getItem('auth_token');
              
              // If we have a token in state but not in localStorage, or they don't match
              if (state.token && (!storedToken || storedToken !== state.token)) {
                state.clearAuth();
              }
              // If we're authenticated but have no token
              else if (state.isAuthenticated && !state.token) {
                state.clearAuth();
              }
            }
            
            state.setHasHydrated(true);
          }
        };
      },
    }
  )
);

// Hook to ensure hydration is complete before using auth state
export const useHydratedAuth = () => {
  const state = useAuthStore();
  return state.hasHydrated ? state : { ...state, isAuthenticated: false, user: null };
};
