'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useCartStore } from '@/stores/cart';
import { useCartSummary } from '@/hooks/useCartSummary';
import { OrderSummaryCard } from '@/components/cart/OrderSummaryCard';
import {
  Minus,
  Plus,
  Trash2,
  ShoppingBag,
  Loader2,
  ShoppingCart,
  ChevronRight,
  Tag,
  Truck,
  Shield,
  ArrowLeft,
  X,
  Percent,
  Gift,
  BookOpen
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { toast } from 'sonner';
import { motion, AnimatePresence } from 'framer-motion';

export default function CartPage() {
  const [updating, setUpdating] = useState<number | null>(null);
  const [removing, setRemoving] = useState<number | null>(null);
  const [showCoupons, setShowCoupons] = useState(false);
  const [couponCode, setCouponCode] = useState('');
  const [applyingCoupon, setApplyingCoupon] = useState(false);
  const [removingCoupon, setRemovingCoupon] = useState(false);
  const [expandedSummary, setExpandedSummary] = useState(false);
  const [initialLoad, setInitialLoad] = useState(true);
  const [clearingCart, setClearingCart] = useState(false);

  const {
    cart,
    isLoading,
    availableCoupons,
    getCart,
    updateQuantity,
    removeItem,
    clearCart,
    applyCoupon,
    removeCoupon,
    getAvailableCoupons
  } = useCartStore();

  const cartSummary = useCartSummary(cart);

  useEffect(() => {
    const loadCart = async () => {
      await getCart();
      setInitialLoad(false);
    };
    loadCart();
    getAvailableCoupons();
  }, [getCart, getAvailableCoupons]);

  const handleQuantityChange = async (itemId: number, newQuantity: number) => {
    if (newQuantity <= 0) {
      handleRemoveItem(itemId);
      return;
    }

    setUpdating(itemId);
    try {
      await updateQuantity(itemId, newQuantity);
      toast.success('Quantity updated');
    } catch (error) {
      toast.error('Failed to update quantity');
    } finally {
      setUpdating(null);
    }
  };

  const handleRemoveItem = async (itemId: number) => {
    setRemoving(itemId);
    try {
      await removeItem(itemId);
      toast.success('Item removed from cart');
    } catch (error) {
      toast.error('Failed to remove item');
    } finally {
      setRemoving(null);
    }
  };

  const handleClearCart = async () => {
    if (!confirm('Are you sure you want to clear your cart?')) return;

    try {
      setClearingCart(true);
      await clearCart();
      toast.success('Cart cleared');
    } catch (error) {
      toast.error('Failed to clear cart');
    } finally {
      setClearingCart(false);
    }
  };

  const handleApplyCoupon = async (code: string) => {
    setApplyingCoupon(true);
    try {
      await applyCoupon(code);
      toast.success('Coupon applied successfully!');
      setShowCoupons(false);
      setCouponCode('');
    } catch (error: any) {
      toast.error(error?.response?.data?.message || 'Invalid coupon code');
    } finally {
      setApplyingCoupon(false);
    }
  };

  const handleRemoveCoupon = async () => {
    setRemovingCoupon(true);
    try {
      await removeCoupon();
      toast.success('Coupon removed');
    } catch (error) {
      toast.error('Failed to remove coupon');
    } finally {
      setRemovingCoupon(false);
    }
  };

  // Loading skeleton
  if (initialLoad && isLoading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="flex flex-col items-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
          <p className="text-sm text-muted-foreground">Loading cart...</p>
        </div>
      </div>
    );
  }

  // Empty cart
  if (!cart || !cart.items.length) {
    return (
      <div className="min-h-screen bg-background flex flex-col">
        {/* Mobile Header */}
        <div className="bg-background border-b sticky top-0 z-50 lg:hidden">
          <div className="flex items-center p-4">
            <Link href="/products" className="mr-3">
              <ArrowLeft className="h-5 w-5" />
            </Link>
            <h1 className="text-lg font-semibold">Shopping Cart</h1>
          </div>
        </div>

        {/* Empty State */}
        <div className="flex-1 flex flex-col items-center justify-center p-6">
          <ShoppingCart className="h-20 w-20 text-muted-foreground mb-4" />
          <h2 className="text-xl font-semibold mb-2">Your cart is empty</h2>
          <p className="text-muted-foreground text-center mb-6">
            Start adding books to build your collection
          </p>
          <Button asChild className="w-full max-w-xs">
            <Link href="/products">
              <ShoppingBag className="h-4 w-4 mr-2" />
              Browse Books
            </Link>
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background pb-[200px] lg:pb-0">
      {/* Mobile Header */}
      <div className="bg-background border-b sticky top-0 z-40 lg:hidden">
        <div className="flex items-center justify-between p-4">
          <div className="flex items-center">
            <Link href="/products" className="mr-3">
              <ArrowLeft className="h-5 w-5" />
            </Link>
            <div>
              <h1 className="text-lg font-semibold">Cart</h1>
              <p className="text-xs text-muted-foreground">{cart.total_items} items</p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowCoupons(true)}
            className="text-primary"
          >
            <Tag className="h-4 w-4 mr-1" />
            Offers
          </Button>
        </div>
      </div>

      {/* Desktop Container */}
      <div className="container mx-auto px-4 py-6 lg:py-8">
        {/* Desktop Header */}
        <div className="hidden lg:flex lg:items-center lg:justify-between mb-6">
          <div>
            <h1 className="text-2xl lg:text-3xl font-bold">Shopping Cart</h1>
            <p className="text-sm text-muted-foreground mt-1">
              {cart.total_items} {cart.total_items === 1 ? 'item' : 'items'} in your cart
            </p>
          </div>
          <div className="flex items-center gap-3">
            <Button
              variant="outline"
              onClick={handleClearCart}
              disabled={clearingCart}
              className="text-destructive hover:text-destructive"
              size="sm"
            >
              {clearingCart ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Trash2 className="h-4 w-4" />
              )}
              <span className="ml-2">Clear Cart</span>
            </Button>
            <Button asChild size="sm">
              <Link href="/products">
                <ShoppingBag className="h-4 w-4 mr-2" />
                Continue Shopping
              </Link>
            </Button>
          </div>
        </div>

        <div className="lg:grid lg:grid-cols-3 lg:gap-8">
          {/* Cart Items */}
          <div className="space-y-3 lg:space-y-4 lg:col-span-2">
            <AnimatePresence>
              {cart.items.map((item) => (
                <motion.div
                  key={item.id}
                  layout
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, x: -100 }}
                >
                  <Card className="p-3 lg:p-6">
                    <div className="flex gap-3 lg:gap-4">
                      {/* Product Image */}
                      <div className="relative w-20 h-24 lg:w-24 lg:h-32 bg-muted rounded-lg overflow-hidden flex-shrink-0">
                        {item.product?.images?.[0]?.url ? (
                          <Image
                            src={item.product.images[0].url}
                            alt={item.product.name}
                            fill
                            className="object-cover"
                            sizes="(max-width: 1024px) 80px, 96px"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center">
                            <BookOpen className="h-6 w-6 lg:h-8 lg:w-8 text-muted-foreground" />
                          </div>
                        )}
                      </div>

                      {/* Product Details */}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-start justify-between gap-2 mb-2">
                          <div className="flex-1">
                            <Link href={`/products/${item.product.slug || item.product.id}`}>
                              <h3 className="font-medium text-sm lg:text-base line-clamp-2 hover:text-primary">
                                {item.product.name}
                              </h3>
                            </Link>
                            <p className="text-xs lg:text-sm text-muted-foreground mt-1">
                              by {item.product.author || item.product.brand || 'Unknown'}
                            </p>
                          </div>
                          {/* Desktop Remove Button */}
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleRemoveItem(item.id)}
                            disabled={removing === item.id}
                            className="hidden lg:flex h-8 w-8 text-muted-foreground hover:text-destructive"
                          >
                            {removing === item.id ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : (
                              <Trash2 className="h-4 w-4" />
                            )}
                          </Button>
                        </div>

                        {/* Price and Quantity */}
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <span className="text-base lg:text-lg font-bold">
                              {cartSummary.currencySymbol}{item.product.price}
                            </span>
                            {item.product.compare_price > item.product.price && (
                              <>
                                <span className="text-xs text-muted-foreground line-through">
                                  {cartSummary.currencySymbol}{item.product.compare_price}
                                </span>
                                <Badge variant="secondary" className="text-[10px] lg:text-xs px-1">
                                  {Math.round((1 - item.product.price / item.product.compare_price) * 100)}% off
                                </Badge>
                              </>
                            )}
                          </div>

                          <div className="flex items-center gap-2">
                            {/* Quantity Controls */}
                            <div className="flex items-center border rounded-lg">
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 lg:h-9 lg:w-9"
                                onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                                disabled={updating === item.id}
                              >
                                <Minus className="h-3 w-3 lg:h-4 lg:w-4" />
                              </Button>
                              <span className="px-3 lg:px-4 text-sm lg:text-base min-w-[40px] text-center">
                                {updating === item.id ? (
                                  <Loader2 className="h-3 w-3 lg:h-4 lg:w-4 animate-spin mx-auto" />
                                ) : (
                                  item.quantity
                                )}
                              </span>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8 lg:h-9 lg:w-9"
                                onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                                disabled={updating === item.id || !item.product.in_stock}
                              >
                                <Plus className="h-3 w-3 lg:h-4 lg:w-4" />
                              </Button>
                            </div>

                            {/* Mobile Remove Button */}
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => handleRemoveItem(item.id)}
                              disabled={removing === item.id}
                              className="h-8 w-8 text-destructive lg:hidden"
                            >
                              {removing === item.id ? (
                                <Loader2 className="h-4 w-4 animate-spin" />
                              ) : (
                                <Trash2 className="h-4 w-4" />
                              )}
                            </Button>
                          </div>
                        </div>

                        {/* Item Total - Desktop Only */}
                        <div className="hidden lg:block text-right text-sm text-muted-foreground mt-2">
                          Subtotal: {cartSummary.currencySymbol}{(item.product.price * item.quantity).toFixed(2)}
                        </div>
                      </div>
                    </div>
                  </Card>
                </motion.div>
              ))}
            </AnimatePresence>

            {/* Mobile Info Cards */}
            <div className="lg:hidden space-y-3 mt-4">
              <div className="bg-blue-50 dark:bg-blue-950/20 rounded-xl p-4">
                <div className="flex items-start gap-3">
                  <Truck className="h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5" />
                  <div className="flex-1">
                    <p className="text-sm font-medium">Free Delivery</p>
                    <p className="text-xs text-muted-foreground mt-0.5">
                      On orders above ₹499 • Usually delivered in 2-3 days
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-green-50 dark:bg-green-950/20 rounded-xl p-4">
                <div className="flex items-center gap-3">
                  <Shield className="h-5 w-5 text-green-600 dark:text-green-400" />
                  <div className="flex-1">
                    <p className="text-sm font-medium">100% Secure Payment</p>
                    <p className="text-xs text-muted-foreground mt-0.5">
                      Your information is protected
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Desktop Order Summary */}
          <div className="hidden lg:block">
            <OrderSummaryCard
              summary={{
                subtotal: cartSummary.subtotal,
                couponDiscount: cartSummary.couponDiscount,
                bundleDiscount: cartSummary.bundleDiscount,
                discountedSubtotal: cartSummary.discountedSubtotal,
                shippingCost: cartSummary.shippingCost || 0,
                shippingDetails: cartSummary.shippingDetails,
                tax: cartSummary.tax,
                total: cartSummary.total,
                currencySymbol: cartSummary.currencySymbol,
                couponCode: cartSummary.couponCode,
                bundleDetails: cartSummary.bundleDetails,
                discountMessage: cartSummary.discountMessage,
                itemCount: cart.total_items,
                requiresPincode: cartSummary.requiresPincode
              }}
              onApplyCoupon={handleApplyCoupon}
              onRemoveCoupon={handleRemoveCoupon}
              applyCouponLoading={applyingCoupon}
              removeCouponLoading={removingCoupon}
              variant="cart"
              showCheckoutButton={true}
              availableCoupons={availableCoupons || []}
            />
          </div>
        </div>
      </div>

      {/* Mobile Fixed Bottom Summary */}
      <motion.div
        className="fixed bottom-0 left-0 right-0 bg-background border-t shadow-2xl z-40 lg:hidden"
        initial={{ y: 100 }}
        animate={{ y: 0 }}
        transition={{ type: "spring", damping: 20 }}
      >
        {/* Quick Actions Bar */}
        <div className="flex items-center justify-between p-3 border-b bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20">
          {cartSummary.couponCode ? (
            <div className="flex items-center gap-2">
              <Badge variant="secondary" className="bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400">
                {cartSummary.couponCode} Applied
              </Badge>
              <Button
                variant="ghost"
                size="icon"
                onClick={handleRemoveCoupon}
                disabled={removingCoupon}
                className="h-6 w-6"
              >
                <X className="h-3 w-3" />
              </Button>
            </div>
          ) : (
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowCoupons(true)}
              className="text-primary font-medium"
            >
              <Tag className="h-4 w-4 mr-1.5" />
              Apply Coupon
            </Button>
          )}

          {(cartSummary.couponDiscount > 0 || cartSummary.bundleDiscount > 0) && (
            <span className="text-sm text-green-600 dark:text-green-400 font-medium">
              Saved {cartSummary.currencySymbol}
              {(cartSummary.couponDiscount + cartSummary.bundleDiscount).toFixed(0)}
            </span>
          )}
        </div>

        {/* Summary Header */}
        <div
          className="p-4 cursor-pointer"
          onClick={() => setExpandedSummary(!expandedSummary)}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs text-muted-foreground mb-1">
                {cart.total_items} {cart.total_items === 1 ? 'item' : 'items'}
              </p>
              <div className="flex items-baseline gap-2">
                <span className="text-2xl font-bold">
                  {cartSummary.currencySymbol}{cartSummary.total.toFixed(0)}
                </span>
              </div>
            </div>
            <div className="flex flex-col items-end gap-2">
              <Button
                asChild
                size="sm"
                className="bg-gradient-to-r from-blue-600 to-blue-700 px-6"
              >
                <Link href="/checkout">
                  Checkout
                </Link>
              </Button>
              <button className="text-muted-foreground">
                {expandedSummary ? (
                  <ChevronRight className="h-5 w-5 rotate-90 transition-transform" />
                ) : (
                  <ChevronRight className="h-5 w-5 -rotate-90 transition-transform" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Expanded Details */}
        <AnimatePresence>
          {expandedSummary && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="overflow-hidden border-t"
            >
              <div className="p-4 space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Subtotal</span>
                  <span>{cartSummary.currencySymbol}{cartSummary.subtotal.toFixed(2)}</span>
                </div>

                {cartSummary.couponDiscount > 0 && (
                  <div className="flex justify-between text-green-600 dark:text-green-400">
                    <span>Coupon Discount</span>
                    <span>-{cartSummary.currencySymbol}{cartSummary.couponDiscount.toFixed(2)}</span>
                  </div>
                )}

                {cartSummary.bundleDiscount > 0 && (
                  <div className="flex justify-between text-green-600 dark:text-green-400">
                    <span>Bundle Discount</span>
                    <span>-{cartSummary.currencySymbol}{cartSummary.bundleDiscount.toFixed(2)}</span>
                  </div>
                )}

                <div className="flex justify-between">
                  <span className="text-muted-foreground">Delivery</span>
                  <span className={cartSummary.shippingCost === 0 ? "text-green-600 dark:text-green-400 font-medium" : ""}>
                    {cartSummary.shippingCost === 0 ? "FREE" : `${cartSummary.currencySymbol}${cartSummary.shippingCost}`}
                  </span>
                </div>

                <div className="flex justify-between">
                  <span className="text-muted-foreground">GST (18%)</span>
                  <span>{cartSummary.currencySymbol}{cartSummary.tax.toFixed(2)}</span>
                </div>

                <div className="pt-2 border-t flex justify-between font-semibold text-base">
                  <span>Total Amount</span>
                  <span>{cartSummary.currencySymbol}{cartSummary.total.toFixed(2)}</span>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>

      {/* Coupons Drawer - Works on all screen sizes */}
      <AnimatePresence>
        {showCoupons && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 0.5 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black z-50"
              onClick={() => setShowCoupons(false)}
            />
            <motion.div
              initial={{ y: "100%" }}
              animate={{ y: 0 }}
              exit={{ y: "100%" }}
              transition={{ type: "spring", damping: 25 }}
              className="fixed bottom-0 left-0 right-0 bg-background rounded-t-3xl z-50 max-h-[85vh]"
            >
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b sticky top-0 bg-background">
                <h2 className="text-lg font-semibold">Apply Coupon</h2>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => setShowCoupons(false)}
                  className="h-8 w-8"
                >
                  <X className="h-5 w-5" />
                </Button>
              </div>

              {/* Content */}
              <div className="p-4 pb-8 overflow-y-auto max-h-[70vh]">
                {/* Manual Input */}
                <div className="flex gap-2 mb-6">
                  <input
                    type="text"
                    placeholder="Enter coupon code"
                    value={couponCode}
                    onChange={(e) => setCouponCode(e.target.value.toUpperCase())}
                    className="flex-1 px-4 py-2.5 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary"
                  />
                  <Button
                    onClick={() => handleApplyCoupon(couponCode)}
                    disabled={!couponCode || applyingCoupon}
                    className="px-6"
                  >
                    {applyingCoupon ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      'Apply'
                    )}
                  </Button>
                </div>

                {/* Available Coupons */}
                <div className="space-y-3">
                  <h3 className="text-sm font-medium text-muted-foreground mb-3">
                    Available Offers ({availableCoupons?.length || 0})
                  </h3>

                  {availableCoupons?.map((coupon) => (
                    <motion.div
                      key={coupon.id}
                      whileTap={{ scale: 0.98 }}
                      className="relative overflow-hidden rounded-2xl border bg-card"
                    >
                      <div className="absolute inset-0 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-blue-950/10 dark:via-purple-950/10 dark:to-pink-950/10 opacity-50" />

                      <div className="relative p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <div className="bg-background rounded-xl p-2.5 shadow-sm">
                              {coupon.type === 'percentage' ? (
                                <Percent className="h-5 w-5 text-blue-600" />
                              ) : coupon.type === 'free_shipping' ? (
                                <Truck className="h-5 w-5 text-green-600" />
                              ) : (
                                <Gift className="h-5 w-5 text-purple-600" />
                              )}
                            </div>
                            <div>
                              <p className="font-bold text-base">{coupon.code}</p>
                              <p className="text-xs text-muted-foreground mt-0.5">{coupon.name}</p>
                            </div>
                          </div>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleApplyCoupon(coupon.code)}
                            disabled={applyingCoupon || cartSummary.couponCode === coupon.code}
                            className="text-xs px-4"
                          >
                            {cartSummary.couponCode === coupon.code ? 'Applied' : 'Apply'}
                          </Button>
                        </div>

                        <p className="text-sm text-muted-foreground mb-2">{coupon.description}</p>

                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          {coupon.minimum_order_amount > 0 && (
                            <span>Min. order: {cartSummary.currencySymbol}{coupon.minimum_order_amount}</span>
                          )}
                          {coupon.expires_at && (
                            <span>Valid till {new Date(coupon.expires_at).toLocaleDateString()}</span>
                          )}
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </div>
  );
}