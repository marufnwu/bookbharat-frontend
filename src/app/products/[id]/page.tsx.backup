'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import FrequentlyBoughtTogether from '@/components/product/FrequentlyBoughtTogether';
import RelatedProducts from '@/components/product/RelatedProducts';
import { productApi } from '@/lib/api';
import { useCartStore } from '@/stores/cart';
import { useWishlistStore } from '@/stores/wishlist';
import { Product } from '@/types';
import { useConfig } from '@/contexts/ConfigContext';
import { toast } from 'sonner';
import {
  BookOpen,
  Star,
  Heart,
  Share2,
  ChevronRight,
  Minus,
  Plus,
  ShoppingCart,
  Truck,
  Shield,
  RotateCcw,
  Loader2,
  Check,
  MapPin,
  X,
  ChevronLeft
} from 'lucide-react';

export default function ProductDetailPage() {
  const params = useParams();
  const router = useRouter();
  const { siteConfig } = useConfig();
  const { addToCart } = useCartStore();
  const { addToWishlist, removeFromWishlist, isInWishlist } = useWishlistStore();

  const [product, setProduct] = useState<Product | null>(null);
  const [quantity, setQuantity] = useState(1);
  const [selectedTab, setSelectedTab] = useState('description');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [addingToCart, setAddingToCart] = useState(false);
  const [buyingNow, setBuyingNow] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [pincode, setPincode] = useState('');
  const [checkingPincode, setCheckingPincode] = useState(false);
  const [deliveryAvailable, setDeliveryAvailable] = useState<boolean | null>(null);
  const [showLightbox, setShowLightbox] = useState(false);

  // Load product data
  useEffect(() => {
    const loadProduct = async () => {
      try {
        setLoading(true);
        setError(null);

        const productId = params.id as string;
        const response = await productApi.getProduct(productId);

        if (response.success) {
          setProduct(response.data.product);
        } else {
          setError('Product not found');
        }
      } catch (err) {
        console.error('Failed to load product:', err);
        setError('Failed to load product');
      } finally {
        setLoading(false);
      }
    };

    if (params.id) {
      loadProduct();
    }
  }, [params.id]);

  const currencySymbol = siteConfig?.payment?.currency_symbol || 'â‚¹';
  const isWishlisted = product ? isInWishlist(product.id) : false;

  const handleAddToCart = async () => {
    if (!product) return;

    try {
      setAddingToCart(true);
      await addToCart(product, quantity);
      toast.success('Added to cart successfully!');
    } catch (error) {
      toast.error('Failed to add to cart');
    } finally {
      setAddingToCart(false);
    }
  };

  const handleBuyNow = async () => {
    if (!product) return;

    try {
      setBuyingNow(true);
      await addToCart(product, quantity);
      router.push('/checkout');
    } catch (error) {
      toast.error('Failed to proceed to checkout');
    } finally {
      setBuyingNow(false);
    }
  };

  const handleWishlistToggle = async () => {
    if (!product) return;

    try {
      if (isWishlisted) {
        await removeFromWishlist(product.id);
        toast.success('Removed from wishlist');
      } else {
        await addToWishlist(product);
        toast.success('Added to wishlist');
      }
    } catch (error) {
      toast.error('Failed to update wishlist');
    }
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: product?.name,
          text: `Check out: ${product?.name}`,
          url: window.location.href,
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast.success('Link copied to clipboard!');
    }
  };

  const checkPincodeDelivery = async () => {
    if (!pincode || pincode.length !== 6) {
      toast.error('Please enter a valid 6-digit pincode');
      return;
    }

    setCheckingPincode(true);
    setTimeout(() => {
      setDeliveryAvailable(Math.random() > 0.3);
      setCheckingPincode(false);
    }, 1000);
  };

  const getDiscountPercentage = () => {
    if (!product?.compare_price || product.compare_price <= product.price) return 0;
    return Math.round((1 - product.price / product.compare_price) * 100);
  };

  const getProductImage = (index: number = 0) => {
    if (!product) return '/book-placeholder.svg';

    if (product.images && product.images.length > index) {
      const image = product.images[index];
      if (image.url) return image.url;
      if (image.image_url) return image.image_url;
      if (image.image_path) {
        const baseUrl = process.env.NEXT_PUBLIC_API_URL?.replace('/api/v1', '') || 'http://localhost:8000';
        return image.image_path.startsWith('http')
          ? image.image_path
          : `${baseUrl}/storage/${image.image_path}`;
      }
    }

    return '/book-placeholder.svg';
  };

  if (loading) {
    return (
      <div className="compact-container compact-section">
        <div className="grid lg:grid-cols-2 compact-gap">
          <div className="compact-spacing">
            <div className="bg-gray-200 rounded-lg aspect-square animate-pulse" />
            <div className="grid grid-cols-4 gap-2">
              {[...Array(4)].map((_, i) => (
                <div key={i} className="bg-gray-200 rounded-lg aspect-square animate-pulse" />
              ))}
            </div>
          </div>
          <div className="compact-spacing">
            <div className="h-6 sm:h-8 bg-gray-200 rounded animate-pulse w-3/4" />
            <div className="h-4 bg-gray-200 rounded animate-pulse w-1/2" />
            <div className="h-10 bg-gray-200 rounded animate-pulse w-1/4" />
          </div>
        </div>
      </div>
    );
  }

  if (error || !product) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <BookOpen className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-xl font-semibold mb-2">Product not found</h3>
          <p className="text-gray-600 mb-4">The product you're looking for doesn't exist.</p>
          <Button asChild>
            <Link href="/products">Browse Products</Link>
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Breadcrumb */}
      <div className="border-b">
        <div className="compact-container compact-padding">
          <nav className="flex items-center gap-1 sm:gap-2 compact-text text-muted-foreground overflow-x-auto scrollbar-hide">
            <Link href="/" className="hover:text-foreground whitespace-nowrap touch-target">Home</Link>
            <ChevronRight className="h-4 w-4 flex-shrink-0" />
            <Link href="/products" className="hover:text-foreground whitespace-nowrap touch-target">Products</Link>
            <ChevronRight className="h-4 w-4 flex-shrink-0" />
            {product.category?.name && (
              <>
                <Link href={`/categories/${product.category?.slug}`} className="hover:text-foreground whitespace-nowrap touch-target">
                  {product.category.name}
                </Link>
                <ChevronRight className="h-4 w-4 flex-shrink-0" />
              </>
            )}
            <span className="text-foreground truncate">{product.name}</span>
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="compact-container compact-section">
        <div className="grid lg:grid-cols-2 compact-gap lg:gap-10">
          {/* Left: Image Gallery */}
          <div className="compact-spacing">
            {/* Main Image */}
            <div className="relative bg-white rounded-lg border overflow-hidden aspect-square">
              <div
                className="relative w-full h-full cursor-pointer"
                onClick={() => setShowLightbox(true)}
              >
                <Image
                  src={getProductImage(selectedImageIndex)}
                  alt={product.name}
                  fill
                  className="object-contain p-8"
                  priority
                />

                {/* Discount Badge */}
                {getDiscountPercentage() > 0 && (
                  <div className="absolute top-4 left-4">
                    <Badge className="bg-red-500 hover:bg-red-600 text-white px-2 py-1 text-sm font-semibold">
                      {getDiscountPercentage()}% OFF
                    </Badge>
                  </div>
                )}
              </div>

              {/* Navigation Arrows */}
              {product.images && product.images.length > 1 && (
                <>
                  <button
                    onClick={() => setSelectedImageIndex(prev => prev > 0 ? prev - 1 : product.images!.length - 1)}
                    className="absolute left-2 top-1/2 -translate-y-1/2 bg-white/90 rounded-full p-2 touch-target shadow-lg hover:bg-white transition-colors"
                  >
                    <ChevronLeft className="h-5 w-5" />
                  </button>
                  <button
                    onClick={() => setSelectedImageIndex(prev => prev < product.images!.length - 1 ? prev + 1 : 0)}
                    className="absolute right-2 top-1/2 -translate-y-1/2 bg-white/90 rounded-full p-2 shadow-lg hover:bg-white transition-colors"
                  >
                    <ChevronRight className="h-5 w-5" />
                  </button>
                </>
              )}
            </div>

            {/* Thumbnail Gallery */}
            {product.images && product.images.length > 1 && (
              <div className="grid grid-cols-5 gap-2">
                {product.images.slice(0, 5).map((_, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedImageIndex(index)}
                    className={`relative aspect-square rounded-md overflow-hidden border-2 transition-all ${
                      selectedImageIndex === index
                        ? 'border-primary ring-2 ring-primary/20'
                        : 'border-border hover:border-gray-400'
                    }`}
                  >
                    <Image
                      src={getProductImage(index)}
                      alt={`${product.name} ${index + 1}`}
                      fill
                      className="object-contain p-1"
                    />
                  </button>
                ))}
              </div>
            )}

            {/* Action Buttons - Mobile */}
            <div className="flex gap-2 lg:hidden">
              <Button
                variant="outline"
                size="lg"
                className="flex-1 touch-target"
                variant="outline"
                size="lg"
                className="flex-1"
                onClick={handleWishlistToggle}
              >
                <Heart className={`h-5 w-5 ${isWishlisted ? 'fill-red-500 text-red-500' : ''}`} />
              </Button
                variant="outline"
                size="lg"
                className="flex-1 touch-target">
              <Button
                variant="outline"
                size="lg"
                className="flex-1"
                onClick={handleShare}
              >
                <Share2 className="h-5 w-5" />
              </Button>
            </div>
          </div>

          {/* Right: Product Info */}
          <div className="space-y-6">
            {/* Title and Author */}
            <div>
              <div className="flex items-center gap-2 mb-2">
                {product.category?.name && (
                  <Badge variant="secondary" className="text-xs">
                    {product.category.name}
                  </Badge>
                )}
                {product.is_bestseller && (
                  <Badge className="bg-orange-500 hover:bg-orange-600 text-white text-xs">
                    Bestseller
                  </Badge>
                )}
              </div>

              <h1 className="text-2xl lg:text-3xl font-bold text-foreground mb-2">
                {product.name}
              </h1>

              <p className="text-base text-muted-foreground">
                by <span className="font-medium text-foreground">
                  {product.brand || product.author || 'Unknown Author'}
                </span>
              </p>
            </div>

            {/* Rating */}
            <div className="flex items-center gap-4 pb-4 border-b">
              <div className="flex items-center gap-2">
                <div className="flex">
                  {[...Array(5)].map((_, i) => (
                    <Star
                      key={i}
                      className={`h-4 w-4 ${
                        i < Math.floor(product.rating || 4.5)
                          ? 'text-yellow-400 fill-current'
                          : 'text-gray-300'
                      }`}
                    />
                  ))}
                </div>
                <span className="font-semibold">{product.rating || '4.5'}</span>
                <span className="text-sm text-muted-foreground">
                  ({product.total_reviews || 150} reviews)
                </span>
              </div>
            </div>

            {/* Price */}
            <div className="space-y-2">
              <div className="flex items-baseline gap-3">
                <span className="text-4xl font-bold text-foreground">
                  {currencySymbol}{parseFloat(String(product.price)).toFixed(2)}
                </span>
                {product.compare_price && product.compare_price > product.price && (
                  <>
                    <span className="text-xl text-muted-foreground line-through">
                      {currencySymbol}{parseFloat(String(product.compare_price)).toFixed(2)}
                    </span>
                    <span className="text-sm font-medium text-green-600">
                      Save {currencySymbol}{(parseFloat(String(product.compare_price)) - parseFloat(String(product.price))).toFixed(2)}
                    </span>
                  </>
                )}
              </div>
              <p className="text-sm text-muted-foreground">Inclusive of all taxes</p>
            </div>

            {/* Stock Status */}
            <div>
              {product.in_stock ? (
                <div className="flex items-center gap-2 text-green-600">
                  <Check className="h-5 w-5" />
                  <span className="font-medium">In Stock</span>
                  {product.stock_quantity && product.stock_quantity < 10 && (
                    <span className="text-orange-600 text-sm">
                      (Only {product.stock_quantity} left)
                    </span>
                  )}
                </div>
              ) : (
                <div className="flex items-center gap-2 text-red-600">
                  <X className="h-5 w-5" />
                  <span className="font-medium">Out of Stock</span>
                </div>
              )}
            </div>

            {/* Delivery Check */}
            <div className="border rounded-lg p-4 space-y-3">
              <div className="flex items-center gap-2 font-medium">
                <MapPin className="h-5 w-5" />
                <span>Check Delivery</span>
              </div>
              <div className="flex gap-2">
                <input
                  type="text"
                  placeholder="Enter pincode"
                  value={pincode}
                  onChange={(e) => setPincode(e.target.value.replace(/\D/g, '').slice(0, 6))}
                  className="flex-1 px-3 py-2 border rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary"
                />
                <Button
                  onClick={checkPincodeDelivery}
                  disabled={checkingPincode}
                  size="default"
                >
                  {checkingPincode ? <Loader2 className="h-4 w-4 animate-spin" /> : 'Check'}
                </Button>
              </div>

              {deliveryAvailable !== null && (
                <div className={`p-3 rounded-md text-sm ${
                  deliveryAvailable ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'
                }`}>
                  {deliveryAvailable ? (
                    <div className="flex items-center gap-2">
                      <Check className="h-4 w-4" />
                      <span>Delivery available â€¢ Expected in 3-5 days</span>
                    </div>
                  ) : (
                    <div className="flex items-center gap-2">
                      <X className="h-4 w-4" />
                      <span>Delivery not available to this pincode</span>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Quantity */}
            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <span className="font-medium">Quantity:</span>
                <div className="flex items-center border rounded-lg">
                  <button
                    onClick={() => setQuantity(Math.max(1, quantity - 1))}
                    className="p-3 hover:bg-gray-100 transition-colors disabled:opacity-50"
                    disabled={quantity <= 1}
                  >
                    <Minus className="h-4 w-4" />
                  </button>
                  <span className="px-6 py-3 min-w-[60px] text-center font-semibold border-x">
                    {quantity}
                  </span>
                  <button
                    onClick={() => setQuantity(Math.min(product.stock_quantity || 99, quantity + 1))}
                    className="p-3 hover:bg-gray-100 transition-colors disabled:opacity-50"
                    disabled={quantity >= (product.stock_quantity || 99)}
                  >
                    <Plus className="h-4 w-4" />
                  </button>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="space-y-3">
                <div className="grid grid-cols-2 gap-3">
                  <Button
                    size="lg"
                    className="h-12"
                    onClick={handleAddToCart}
                    disabled={!product.in_stock || addingToCart}
                  >
                    {addingToCart ? (
                      <Loader2 className="h-5 w-5 animate-spin" />
                    ) : (
                      <>
                        <ShoppingCart className="h-5 w-5 mr-2" />
                        Add to Cart
                      </>
                    )}
                  </Button>

                  <Button
                    size="lg"
                    variant="default"
                    className="h-12 bg-orange-500 hover:bg-orange-600"
                    onClick={handleBuyNow}
                    disabled={!product.in_stock || buyingNow}
                  >
                    {buyingNow ? (
                      <Loader2 className="h-5 w-5 animate-spin" />
                    ) : (
                      'Buy Now'
                    )}
                  </Button>
                </div>

                {/* Wishlist & Share - Desktop */}
                <div className="hidden lg:grid grid-cols-2 gap-3">
                  <Button
                    variant="outline"
                    size="lg"
                    onClick={handleWishlistToggle}
                  >
                    <Heart className={`h-5 w-5 mr-2 ${isWishlisted ? 'fill-red-500 text-red-500' : ''}`} />
                    {isWishlisted ? 'Saved' : 'Save'}
                  </Button>

                  <Button
                    variant="outline"
                    size="lg"
                    onClick={handleShare}
                  >
                    <Share2 className="h-5 w-5 mr-2" />
                    Share
                  </Button>
                </div>
              </div>
            </div>

            {/* Features */}
            <div className="grid grid-cols-2 gap-4 pt-4 border-t">
              {[
                { icon: Truck, text: 'Free Delivery' },
                { icon: Shield, text: 'Secure Payment' },
                { icon: RotateCcw, text: '7-Day Returns' },
                { icon: Check, text: '100% Authentic' }
              ].map((feature, index) => (
                <div key={index} className="flex items-center gap-2">
                  <feature.icon className="h-5 w-5 text-primary" />
                  <span className="text-sm text-muted-foreground">{feature.text}</span>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Product Details Tabs */}
        <div className="mt-12">
          <Card>
            <div className="border-b">
              <div className="flex overflow-x-auto">
                {['description', 'specifications', 'reviews'].map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setSelectedTab(tab)}
                    className={`px-6 py-4 text-sm font-medium capitalize whitespace-nowrap transition-all ${
                      selectedTab === tab
                        ? 'text-primary border-b-2 border-primary bg-primary/5'
                        : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                    }`}
                  >
                    {tab}
                    {tab === 'reviews' && (
                      <span className="ml-2 text-xs bg-muted px-2 py-0.5 rounded-full">
                        {product.total_reviews || 0}
                      </span>
                    )}
                  </button>
                ))}
              </div>
            </div>

            <CardContent className="p-6">
              {selectedTab === 'description' && (
                <div className="prose max-w-none">
                  <p className="text-muted-foreground leading-relaxed">
                    {product.description || product.short_description || 'No description available.'}
                  </p>
                </div>
              )}

              {selectedTab === 'specifications' && (
                <div className="space-y-3">
                  {[
                    ['SKU', product.sku || 'N/A'],
                    ['Author/Brand', product.brand || product.author || 'N/A'],
                    ['Category', product.category?.name || 'N/A'],
                    ['Weight', product.weight ? `${product.weight}g` : 'N/A'],
                    ['Stock', product.manage_stock ? `${product.stock_quantity || 0} units` : 'Available'],
                  ].map(([label, value]) => (
                    <div key={label} className="flex justify-between py-3 border-b last:border-0">
                      <span className="text-muted-foreground">{label}</span>
                      <span className="font-medium">{value}</span>
                    </div>
                  ))}
                </div>
              )}

              {selectedTab === 'reviews' && (
                <div className="text-center py-12">
                  <div className="inline-flex items-center justify-center w-16 h-16 bg-muted rounded-full mb-4">
                    <Star className="h-8 w-8 text-muted-foreground" />
                  </div>
                  <p className="text-muted-foreground mb-4">No reviews yet</p>
                  <Button>Write a Review</Button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Frequently Bought Together */}
        <div className="mt-12">
          <FrequentlyBoughtTogether productId={params.id as string} mainProduct={product} />
        </div>

        {/* Related Products */}
        <div className="mt-12">
          <RelatedProducts productId={params.id as string} categoryId={product.category?.id} />
        </div>
      </div>

      {/* Image Lightbox */}
      {showLightbox && product.images && (
        <div
          className="fixed inset-0 z-50 bg-black/95 flex items-center justify-center p-4"
          onClick={() => setShowLightbox(false)}
        >
          <button
            className="absolute top-4 right-4 text-white/80 hover:text-white"
            onClick={() => setShowLightbox(false)}
          >
            <X className="h-8 w-8" />
          </button>

          <div className="relative max-w-5xl w-full h-[80vh]" onClick={(e) => e.stopPropagation()}>
            <Image
              src={getProductImage(selectedImageIndex)}
              alt={product.name}
              fill
              className="object-contain"
              priority
            />

            {product.images.length > 1 && (
              <>
                <button
                  onClick={() => setSelectedImageIndex(prev => prev > 0 ? prev - 1 : product.images!.length - 1)}
                  className="absolute left-4 top-1/2 -translate-y-1/2 bg-white/10 backdrop-blur-sm text-white rounded-full p-3 hover:bg-white/20"
                >
                  <ChevronLeft className="h-6 w-6" />
                </button>
                <button
                  onClick={() => setSelectedImageIndex(prev => prev < product.images!.length - 1 ? prev + 1 : 0)}
                  className="absolute right-4 top-1/2 -translate-y-1/2 bg-white/10 backdrop-blur-sm text-white rounded-full p-3 hover:bg-white/20"
                >
                  <ChevronRight className="h-6 w-6" />
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
